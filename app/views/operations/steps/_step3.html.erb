<h3><%= t 'operations.topology_rules' %></h3>
<table class="table table-striped table-bordered table-hover">
  <tr>
    <th class="info"><%= t 'order' %></th>
    <th class="info"><%= t 'operations.class_set' %></th>
    <th class="info"><%= t 'operations.cluster_tolerance' %></th>
    <th class="info"><%= t 'operations.first_feature_class' %></th>
    <th class="info"><%= t 'operations.rule' %></th>
    <th class="info"><%= t 'operations.second_feature_class' %></th>
    <th class="info"></th>
  </tr>
  <%
     if current_user.topology_rules_set_templates.count > 0
       templates = current_user.topology_rules_set_templates.select ['id, name']
  %>
      <div class="form-group">
        <%= label_tag :template, (t 'operations.use_rules_template') %>
        <%= select_tag :template, options_for_select(templates.to_a.map { |template| ["#{template.name} (#{t 'operations.rules', :count => template.topology_rule_templates.count})", template.id] }), {:include_blank => (t 'operations.select_rules_template'), :class => 'form-control', :onchange => '$("form").submit();'} %>
      </div>
  <% end %>
  <%
     classes = begin
       JSON.parse(@operation.value OperationParameter::PARAM_CLASSES)
     rescue
       []
     end
     class_sets = classes.map { |cs| cs['class_set'] }
     rules = @operation.values OperationParameter::PARAM_RULE_JSON
     rule_order = 0
     filled_rules_count = 0
     has_unfilled_rule = false
     clustered_tolerances = Hash.new
     unless rules.nil?
       rules.each do |saved_rule|
  %>
          <%
             rule_order += 1
             rule = saved_rule.value
             is_filled = rule_is_filled rule
             if is_filled
               filled_rules_count += 1
               if has_unfilled_rule
                 puts 'wtf'
               end
             else
               if has_unfilled_rule
                 puts 'wtf'
               end
               has_unfilled_rule = true
             end
             rule = JSON.parse rule unless rule.nil?

             selected_class_set = rule['class_set'] unless rule.nil?
             cluster_tolerance = rule['cluster_tolerance'] unless rule.nil?
             if !rule.nil? && rule['added']
               unless selected_class_set.nil? && cluster_tolerance.nil?
                 if clustered_tolerances[selected_class_set].nil?
                   clustered_tolerances.merge!({selected_class_set => cluster_tolerance})
                 end
               end
             end
             if cluster_tolerance.nil?
               cluster_tolerance = clustered_tolerances[selected_class_set].nil? ? 0.001 : clustered_tolerances[selected_class_set]
             end
             selected_rule = rule['rule'] unless rule.nil?
             selected_fc1 = rule['fc1'] unless rule.nil?

             class_set = classes.select { |cs| cs['class_set'] == selected_class_set }
             class_set = class_set.length > 0 ? class_set[0] : nil
             first_class_list = class_set['fcs'].map { |fc| fc['fc'] } unless class_set.nil?
             # Если первый класс уже выбран, фильтруем список правил
             fc1_type = unless selected_fc1.nil? || class_set.nil?
                          selected_fc1_type = class_set['fcs'].select { |fc| fc['fc'] == selected_fc1 }
                          if selected_fc1_type.length > 0
                            shape_type_for_rule selected_fc1_type[0]['shapeType']
                          end
                        end
             second_types = class_set['fcs'].select { |fc| fc['fc'] != selected_fc1 }.map { |fc| fc['shapeType'] }.uniq unless class_set.nil?
             second_types.map! { |shape_type| shape_type_for_rule shape_type } unless second_types.nil?

             suitable_rules = unless fc1_type.nil?
                                rule_types.select do |rt|
                                  if rule_types[rt][:first_class] == fc1_type
                                    second_class = rule_types[rt][:second_class]
                                    if second_class.nil?
                                      true
                                    else
                                      second_types.include? second_class
                                    end
                                  end
                                end
                              end
             # Если правило уже выбрано фильтруем список классов для второго класса правила (или вообще убираем, если правило для одного класса)
             second_class_list = nil
             selected_fc2 = nil
             unless selected_rule.nil?
               second_class_type = shape_type_from_rule(rule_types.map { |rt| rt[1] }.select { |rt| rt[:rule] == selected_rule }[0][:second_class])
               second_class_list = unless second_class_type.nil? || class_set.nil?
                                     class_set['fcs'].select { |fc| fc['shapeType'] == second_class_type && fc['fc'] != selected_fc1 }.map { |fc| fc['fc'] }
                                   end
               selected_rule = rule_types.to_a.map { |rt| rt[1][:rule] }.index selected_rule
               rule_i18n_name = rule_types.select { |rt| rule_types[rt][:rule] == rule['rule'] }.first[1][:rule_i18n_name]
             end
          %>
          <% if is_filled %>
              <tr>
                <td><%= "#{rule_order}." %></td>
                <td><%= rule['class_set'] %></td>
                <td><%= rule['cluster_tolerance'] %></td>
                <td><%= rule['fc1'] %></td>
                <td><%= t rule_i18n_name %></td>
                <td><%= rule['fc2'] %></td>
                <td><%= link_to (content_tag :span, nil, :class => 'glyphicon glyphicon-trash', :title => (t 'operations.remove_rule')), delete_rule_path(:id => @operation.id, :order => saved_rule.value_order), :data => {:confirm => (t 'are_you_sure')} %></td>
              </tr>
          <% else %>
              <tr>
                <td colspan="100%">
                  <%= render :partial => 'operations/steps/run_topology_validation' %>
                </td>
              </tr>
              <%= hidden_field_tag :rule_order, saved_rule.value_order %>
              <tr>
                <td colspan="6">
                  <div class="form-group">
                    <%= label_tag :class_set, (t 'operations.class_set') %>
                    <%= select_tag :class_set, options_for_select(class_sets, selected_class_set), {:include_blank => selected_class_set.nil?, :class => 'form-control', :onchange => '$("form").submit();'} %>
                  </div>
                  <% unless selected_class_set.nil? %>
                      <div class="form-group">
                        <%= label_tag :cluster_tolerance, (t 'operations.cluster_tolerance_optional') %>
                        <%= number_field_tag :cluster_tolerance, cluster_tolerance, :step => 20, :class => 'form-control' %>
                      </div>
                      <% unless clustered_tolerances[selected_class_set].nil? %>
                          <p class="alert alert-warning"><%= t 'operations.cluster_tolerance_warning', :class_set => selected_class_set %></p>
                      <% end %>
                  <% end %>
                  <% unless first_class_list.nil? %>
                      <div class="form-group">
                        <%= label_tag :fc1, (second_class_list.nil? ? (t 'operations.feature_class') : (t 'operations.first_feature_class')) %>
                        <%= select_tag :fc1, options_for_select(first_class_list, selected_fc1), {:include_blank => true, :class => 'form-control', :onchange => '$("form").submit();'} %>
                      </div>
                  <% end %>
                  <% unless suitable_rules.nil? %>
                      <div class="form-group">
                        <%= label_tag :rule_type, (t 'operations.rule') %>
                        <%= select_tag :rule_type, options_for_select(suitable_rules.map { |rule| [(t rule[1][:rule_i18n_name]), rule[0], {'data-has-second-class' => !rule[1][:second_class].nil?}] }, selected_rule), {:include_blank => true, :class => 'form-control', :onchange => 'rule_selected(this);'} %>
                      </div>
                  <% end %>
                  <% unless second_class_list.nil? %>
                      <div id="p_fc2" class="form-group">
                        <%= label_tag :fc2, (t 'operations.second_feature_class') %>
                        <%= select_tag :fc2, options_for_select(second_class_list, selected_fc2), {:include_blank => true, :class => 'form-control'} %>
                      </div>
                  <% end %>
                </td>
                <td style="vertical-align: middle"><%= link_to (content_tag :span, nil, :class => 'glyphicon glyphicon-trash', :title => (t 'operations.remove_rule')), delete_rule_path(:id => @operation.id, :order => saved_rule.value_order), :data => {:confirm => (t 'are_you_sure')} %></td>
              </tr>
          <% end %>
      <% end %>
  <% end %>
  <% unless has_unfilled_rule %>
      <tr>
        <td colspan="100%">
          <%= render :partial => 'operations/steps/run_topology_validation' %>
        </td>
      </tr>
  <% end %>
  <tr>
    <% if rules.count == 0 %>
      <tr>
        <td colspan="100%" class="warning">
          <%= "#{t 'operations.no_rules_yet'} #{t 'please'}" %>
          <%= submit_tag (t 'imperative.add'), :name => 'add_topology_rule', :class => 'btn-link', :style => 'padding: 0; border: 0' %>
        </td>
      </tr>
  <% else %>
      <tr>
        <td colspan="100%" style="text-align: right">
          <%= submit_tag (t 'operations.add_rule'), :class => 'btn btn-info', :name => 'add_topology_rule' %>
        </td>
      </tr>
  <% end %>
</table>
